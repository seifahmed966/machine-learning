clear all
close all 
clc

M = importdata('house_prices_data_training_data.csv');
x=M.data(:,2:19);
[m, n] = size(x);
Y=M.data(:,1);
y=length(Y);


%Correlation
Corr_x = corr(x);
%Covariance
x_cov=cov(x) ;
%principal components 
[U S V] = svd(x_cov);
A = diag(S);

for k=1:length(A)
    a=1-(sum(A(1:k))/sum(A));
    if(a<=0.001)
        break;
    end
end
%Reduced data
R = U(:,1:k)'*x';
%Approx Data
aprox = R'*U(1:k,1:k);

Error = 1/size(R,2) * sum(aprox-R');
SSigma = 1.0/m .* x' * x;





% K Means
%initializing the centroids is to select random examples from the training set

K = 2;
iterations = 10;
closest = zeros(size(x,1), 1);
rndm = randperm(size(x, 1));
centroids = x(rndm(1:k), :);

for i = 1:length(closest)
    distance = zeros(K, 1);
    for j = 1:K
        distance(j) = sum(sum((x(i, :) - centroids(j, :)) .^ 2 ));
    end
    [closest_distance, closest(i)] = min(distance);
end
centroids = zeros(K, n);
for i=1:K
  indexes = find(closest == i);
  if size(indexes, 1) > 0
    centroids(i, :) = mean(x(indexes, :));
  end
end




%anomly detection
mu = zeros(n, 1);
Sigma = zeros(n, 1);
%get gaussian parameters
mu = mean(x)';
Sigma = std(x, 1)';
%we get PDF under gaussian dis using mu and sigma
kk = length(mu);
if (size(Sigma, 2) == 1) || (size(Sigma, 1) == 1)
    Sigma = diag(Sigma);
end


X = bsxfun(@minus, x, mu(:)');
p = (2 * pi) ^ (- kk / 2) * det(Sigma) ^ (-0.5) * exp(-0.5 * sum(bsxfun(@times, X * pinv(Sigma), X), 2));



%using gaussian parameters we find best threshold
bestEpsilon = 0;
bestF1 = 0;
F1 = 0;

stepsize = (max(p) - min(p)) / 1000
for epsilon = min(p):stepsize:max(p)

    cvPrediction = (p < epsilon);
    
    tp = sum((Y==1) & (cvPrediction==1));
    fp = sum((Y==0) & (cvPrediction==1));
    fn = sum((Y==1) & (cvPrediction==0));
    
    prec = tp / (tp+fp);
    rec = tp / (tp+fn);
    
    F1 = (2*prec*rec) / (prec+rec);

    if F1 > bestF1
       bestF1 = F1;
       bestEpsilon = epsilon;
    end
end
